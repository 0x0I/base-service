apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{template "basic-service.name" .}}-secrets
  namespace: {{.Values.namespace}}
  annotations:
    force-sync: {{ now | unixEpoch | quote }}
  labels:
    app: {{template "basic-service.name" .}}
    {{- if .Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{.Values.namespace}}-secrets
    kind: SecretStore
  target:
    name: {{template "basic-service.name" .}}-secrets
    creationPolicy: Owner
  dataFrom:
    - extract:
        key: eks/{{.Values.clusterName}}/{{.Values.namespace}}/{{ .Values.keystoreServicePathOverride | default (include "basic-service.name" $) }}
---
{{ range $.Values.base64DecodedSecretVolumes }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .name }}-secret
  namespace: {{$.Values.namespace}}
  annotations:
    force-sync: {{ now | unixEpoch | quote }}
  labels:
    app: {{template "basic-service.name" $}}
    {{- if .Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: {{$.Values.namespace}}-secrets
  target:
    creationPolicy: Owner
    deletionPolicy: Retain
    name: {{.name}}-secret
    template:
      engineVersion: v2
      data:
        decoded: '{{ printf "{{ .%s | b64dec }}" .key  }}'
  data:
  - secretKey: {{ .key }}
    remoteRef:
      key: eks/{{$.Values.clusterName}}/{{$.Values.namespace}}/{{template "basic-service.name" $}}
      property: {{ .key }}
{{- end }}
