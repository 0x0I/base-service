{{- if and .Values.serviceTargetPort .Values.servicePort .Values.common_name }}
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: {{template "basic-service.name" .}}-gateway
  namespace: istio-system
  labels:
    app: {{template "basic-service.name" .}}
    {{- if .Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  selector:
    istio: ingress # use istio default controller
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: {{ default "MUTUAL" .Values.tlsMode }}
      credentialName: {{template "basic-service.name" .}}-ingress-cert
    hosts:
    - {{template "basic-service.commonName" .}}
    {{- range $common_name := .Values.extraCommonNames }}
    - {{ $common_name }}
    {{- end }}
   {{- range $routeName, $routeValue := $.Values.ingressRoutes }}
  - port:
      number: {{tpl $routeValue.ingressPort $}}
      name: {{$routeName}}
      protocol: {{$routeValue.protocol}}
    {{- if $routeValue.tlsMode }}
    tls:
      mode: {{$routeValue.tlsMode}}
      credentialName: {{template "basic-service.name" $}}-ingress-cert
    {{- end }}
    hosts:
    - {{template "basic-service.commonName" $}}
   {{- end }}
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: {{template "basic-service.name" .}}-virtualservice
  namespace: {{.Values.namespace}}
  labels:
    app: {{template "basic-service.name" .}}
    {{- if .Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  hosts:
  - {{template "basic-service.commonName" .}}
  {{- range $common_name := .Values.extraCommonNames }}
  - {{ $common_name }}
  {{- end }}
  gateways:
  - istio-system/{{template "basic-service.name" $}}-gateway
  http:
  - match:
    - port: 443
    route:
    - destination:
        host: {{template "basic-service.name" .}}-svc.{{.Values.namespace}}.svc.cluster.local
        port:
          number: {{.Values.serviceTargetPort}}
  {{- range $routeName, $routeValue := $.Values.ingressRoutes }}
  - match:
    - port: {{tpl $routeValue.ingressPort $}}
    route:
    - destination:
        host: {{template "basic-service.name" $}}-svc.{{$.Values.namespace}}.svc.cluster.local
        port:
          number: {{tpl $routeValue.targetPort $}}
  {{- end }}
{{- end }}
---
{{- if and .Values.serviceTargetPort .Values.servicePort .Values.grpcCommonName }}
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grpc-{{template "basic-service.name" .}}-gateway
  namespace: istio-system
  labels:
    app: {{template "basic-service.name" .}}
    {{- if .Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  selector:
    istio: ingress # use istio default controller
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: {{ default "MUTUAL" .Values.tlsMode }}
      credentialName: grpc-{{template "basic-service.name" .}}-ingress-cert
    hosts:
    - {{.Values.grpcCommonName}}
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grpc-{{template "basic-service.name" .}}-virtualservice
  namespace: {{.Values.namespace}}
spec:
  hosts:
  - {{.Values.grpcCommonName}}
  gateways:
  - istio-system/grpc-{{template "basic-service.name" .}}-gateway
  http:
  - route:
    - destination:
        host: grpc-{{template "basic-service.name" .}}-svc.{{.Values.namespace}}.svc.cluster.local
        port:
          number: {{.Values.grpcServiceTargetPort}}
{{- end }}

---
{{- range $routeName, $routeValue := $.Values.externalRoutes }}
# External DNS Routing
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: "{{template "basic-service.name" $}}-external-se-{{$routeName}}"
  namespace: "{{$.Values.namespace}}"
  labels:
    app: {{template "basic-service.name" $}}
    {{- if $.Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  hosts:
    - "{{$routeValue.destinationName}}"
{{- range $host := $routeValue.hosts }}
    - "{{$host}}"
{{- end }}
  location: {{ $routeValue.location | default "MESH_EXTERNAL" }}
  ports:
    - number: 80
      name: http-port
      protocol: HTTP
      targetPort: 443
  resolution: DNS
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: "{{template "basic-service.name" $}}-external-dr-{{$routeName}}"
  namespace: "{{$.Values.namespace}}"
  labels:
    app: {{template "basic-service.name" $}}
    {{- if $.Values.labels }}
    {{- include "basic-service.labels" $ | indent 4}}
    {{- end }}
spec:
  host: "{{$routeValue.destinationName}}"
  exportTo: ["."] # only export to the namespace defined in metadata, otherwise the rule becomes applied globally.
  trafficPolicy:
    portLevelSettings:
      - port:
          number: 80
        tls:
          mode: MUTUAL
          clientCertificate: "/etc/client-certs/tls.crt"
          privateKey: "/etc/client-certs/tls.key"
          caCertificates: "/etc/client-ca/cacert"
          sni: "{{$routeValue.destinationName}}"
---
{{- end }}
